#!/usr/bin/python3
#WARNING: This Font Require X-GLCD Lib.
#         You can not use it with MikroE GLCD Lib.

#Font Generated by MikroElektronika GLCD Font Creator 1.2.0.0
#MikroElektronika 2011 
#http://www.mikroe.com 

#GLCD FontName : W
#Based on a font created by Reekee of Dimenzioned - reekee@00.co.uk
# GLCD FontSize : 7 x 8

def height():
    return 8

def width():
    return 7

def hmap():
    return False

def reverse():
    return False

def monospaced():
    return false

def min_ch():
    return 32
def max_ch():
    return 127


_font = \
b'\x03\x00\x5a\x0a\x0e'\
b'\x04\x00\x00\x00\x00\x00'\
b'\x01\x00\x5c'\
b'\x03\x00\x0c\x00\x0c'\
b'\x05\x00\x60\x7c\x04\x64\x7c'\
b'\x03\x00\x5c\xfe\x74'\
b'\x04\x00\x48\x20\x10\x48'\
b'\x03\x00\x10\x38\x10'\
b'\x01\x00\x0c'\
b'\x02\x00\x38\x44'\
b'\x02\x00\x44\x38'\
b'\x07\x00\x08\x1c\x3c\x78\x3c\x1c\x08'\
b'\x03\x00\x10\x38\x10'\
b'\x01\x00\xc0'\
b'\x03\x00\x10\x10\x10'\
b'\x01\x00\x40'\
b'\x03\x00\x60\x10\x0c'\
b'\x03\x00\x7c\x44\x7c'\
b'\x01\x00\x7c'\
b'\x03\x00\x74\x54\x5c'\
b'\x03\x00\x54\x54\x7c'\
b'\x03\x00\x3c\x20\x78'\
b'\x03\x00\x5c\x54\x74'\
b'\x03\x00\x7c\x54\x74'\
b'\x03\x00\x04\x04\x7c'\
b'\x03\x00\x7c\x54\x7c'\
b'\x03\x00\x5c\x54\x7c'\
b'\x01\x00\x50'\
b'\x01\x00\xd0'\
b'\x03\x00\x10\x28\x44'\
b'\x02\x00\x28\x28'\
b'\x03\x00\x44\x28\x10'\
b'\x03\x00\x5a\x0a\x0e'\
b'\x05\x00\x7e\x42\x5a\x52\x5e'\
b'\x03\x00\x7c\x14\x7c'\
b'\x03\x00\x7c\x54\x6c'\
b'\x03\x00\x7c\x44\x44'\
b'\x03\x00\x7c\x44\x38'\
b'\x03\x00\x7c\x54\x54'\
b'\x03\x00\x7c\x14\x04'\
b'\x03\x00\x7c\x44\x74'\
b'\x03\x00\x7c\x10\x7c'\
b'\x01\x00\x7c'\
b'\x03\x00\x40\x40\x7c'\
b'\x03\x00\x7c\x10\x6c'\
b'\x03\x00\x7c\x40\x40'\
b'\x05\x00\x7c\x04\x38\x04\x7c'\
b'\x03\x00\x7c\x04\x7c'\
b'\x03\x00\x7c\x44\x7c'\
b'\x03\x00\x7c\x14\x1c'\
b'\x03\x00\x1c\x14\x7c'\
b'\x03\x00\x7c\x14\x6c'\
b'\x03\x00\x5c\x54\x74'\
b'\x03\x00\x04\x7c\x04'\
b'\x03\x00\x7c\x40\x7c'\
b'\x03\x00\x3c\x40\x3c'\
b'\x05\x00\x7c\x40\x30\x40\x7c'\
b'\x03\x00\x6c\x10\x6c'\
b'\x03\x00\x5c\x50\x7c'\
b'\x03\x00\x64\x54\x4c'\
b'\x02\x00\x7c\x44'\
b'\x03\x00\x0c\x10\x60'\
b'\x02\x00\x44\x7c'\
b'\x01\x00\x5c'\
b'\x03\x00\x40\x40\x40'\
b'\x01\x00\x5c'\
b'\x03\x00\x7c\x14\x7c'\
b'\x03\x00\x7c\x54\x6c'\
b'\x03\x00\x7c\x44\x44'\
b'\x03\x00\x7c\x44\x38'\
b'\x03\x00\x7c\x54\x54'\
b'\x03\x00\x7c\x14\x04'\
b'\x03\x00\x7c\x44\x74'\
b'\x03\x00\x7c\x10\x7c'\
b'\x01\x00\x7c'\
b'\x03\x00\x40\x40\x7c'\
b'\x03\x00\x7c\x10\x6c'\
b'\x03\x00\x7c\x40\x40'\
b'\x05\x00\x7c\x04\x38\x04\x7c'\
b'\x03\x00\x7c\x04\x7c'\
b'\x03\x00\x7c\x44\x7c'\
b'\x03\x00\x7c\x14\x1c'\
b'\x03\x00\x1c\x14\x7c'\
b'\x03\x00\x7c\x14\x6c'\
b'\x03\x00\x5c\x54\x74'\
b'\x03\x00\x04\x7c\x04'\
b'\x03\x00\x7c\x40\x7c'\
b'\x03\x00\x3c\x40\x3c'\
b'\x05\x00\x7c\x40\x30\x40\x7c'\
b'\x03\x00\x6c\x10\x6c'\
b'\x03\x00\x5c\x50\x7c'\
b'\x03\x00\x64\x54\x4c'\
b'\x01\x00\x5c'\
b'\x01\x00\xfe'\
b'\x01\x00\x5c'\
b'\x04\x00\x10\x08\x10\x08'\
b'\x03\x00\x7e\x42\x7e'\


_index = \
b'\x00\x00\x05\x00\x0b\x00\x0e\x00\x13\x00\x1a\x00\x1f\x00\x25\x00'\
b'\x2a\x00\x2d\x00\x31\x00\x35\x00\x3e\x00\x43\x00\x46\x00\x4b\x00'\
b'\x4e\x00\x53\x00\x58\x00\x5b\x00\x60\x00\x65\x00\x6a\x00\x6f\x00'\
b'\x74\x00\x79\x00\x7e\x00\x83\x00\x86\x00\x89\x00\x8e\x00\x92\x00'\
b'\x97\x00\x9c\x00\xa3\x00\xa8\x00\xad\x00\xb2\x00\xb7\x00\xbc\x00'\
b'\xc1\x00\xc6\x00\xcb\x00\xce\x00\xd3\x00\xd8\x00\xdd\x00\xe4\x00'\
b'\xe9\x00\xee\x00\xf3\x00\xf8\x00\xfd\x00\x02\x01\x07\x01\x0c\x01'\
b'\x11\x01\x18\x01\x1d\x01\x22\x01\x27\x01\x2b\x01\x30\x01\x34\x01'\
b'\x37\x01\x3c\x01\x3f\x01\x44\x01\x49\x01\x4e\x01\x53\x01\x58\x01'\
b'\x5d\x01\x62\x01\x67\x01\x6a\x01\x6f\x01\x74\x01\x79\x01\x80\x01'\
b'\x85\x01\x8a\x01\x8f\x01\x94\x01\x99\x01\x9e\x01\xa3\x01\xa8\x01'\
b'\xad\x01\xb4\x01\xb9\x01\xbe\x01\xc3\x01\xc6\x01\xc9\x01\xcc\x01'\
b'\xd2\x01\xd2\x01\x00\x00'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - min_ch() + 1) if oc >= min_ch() and oc <= max_ch() else 0
    doff = ifb(_mvi[ioff : ])
    # print("ioff: %d, doff: %d"%(ioff,doff))
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((height() - 1)//8 + 1) * width
    # print("next_offs: ",next_offs)
    return _mvfont[doff + 2:next_offs], height(), width

if __name__ == "__main__":
    pixels,height,width=get_ch('A')
    print("width: {:d} height: {:d}".format(width,height))
    bytes_per_row = (height-1)//8 +1
    print("bytes_per_row: ",bytes_per_row)
    for i in range(width):
        ch = pixels[bytes_per_row*i]
        for j in range(bytes_per_row-1):
            ch |= pixels[2*i+j+1] << 8*(j+1)
        print("{:x}".format(ch))
        #print(hex(pixels[2*i])," ",hex(pixels[2*i+1]),end=" ")
        #print(hex(row)," ",end="")
    print("")
    for i in range(width):
        mask = 0x80 << (bytes_per_row-1)*8
        ch = pixels[bytes_per_row*i]
        for j in range(bytes_per_row-1):
            ch |= pixels[bytes_per_row*i+j+1] << 8*(j+1) 
        #print("pixel row",hex(ch))    
        for k in range(8*bytes_per_row):
            if (mask & ch):
                print('x ',end="")
            else:
                print('. ',end="")
            mask >>=1
        print("")


