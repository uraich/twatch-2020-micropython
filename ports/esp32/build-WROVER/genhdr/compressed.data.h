#define MP_MAX_UNCOMPRESSED_TEXT_LEN (73)
MP_COMPRESSED_DATA("invali\344can'\364mus\364'%q\247no\364objec\364argumen\364argument\363functio\356forma\364b\345erro\362conver\364t\357fo\362Wif\351'%s\247keywor\344require\344i\363o\346I2\323strin\347specifie\362supporte\344typ\345inde\370lengt\350rang\345Invali\344attribut\345wit\350%\344Undocumente\344i\356ar\347empt\371implemente\344isn'\364multipl\345UUI\304\341assignmen\364identifie\362o\362positiona\354alread\371doesn'\364Paramete\362expectin\347generato\362need\363faile\344ou\364se\364synta\370to\357expecte\344n\357fro\355SP\311allowe\344a\356an\344comple\370fiel\344ha\363intege\362missin\347outsid\345tupl\345unknow\356unsupporte\344valu\345%\363Faile\344befor\345buffe\362memor\371numbe\362in\364nam\345operatio\356pi\356specifie\344Erro\362Interna\354foun\344install\272instanc\345nonloca\354para\355sequenc\345vali\344No\364ba\344betwee\356bu\364defaul\364indice\363struct\272%\361arg\363characteristi\343dic\364lis\364lon\347mod\345o\356onl\371zer\357Canno\364TCP/I\320activ\345creat\345drive\362impor\364metho\344specificatio\356value\363incompatibl\345issubclass(\251afte\362byte\363clas\363give\356ke\371loca\354")
MP_MATCH_COMPRESSED("%c needs int or char", "\377%c\263\320\254char")
MP_MATCH_COMPRESSED("%q index out of range", "\377\345\232\265\224\234")
MP_MATCH_COMPRESSED("%q indices must be integers, not %s", "\377\345\343\202\212integers,\204\312")
MP_MATCH_COMPRESSED("'%q' argument required", "\377\203\206\222")
MP_MATCH_COMPRESSED("'%s' object doesn't support item assignment", "\377\220\205\257support item\252")
MP_MATCH_COMPRESSED("'%s' object doesn't support item deletion", "\377\220\205\257support item deletion")
MP_MATCH_COMPRESSED("'%s' object has no attribute '%q'", "\377\220\205\302\272\236\203")
MP_MATCH_COMPRESSED("'%s' object isn't an iterator", "\377\220\205\246\276iterator")
MP_MATCH_COMPRESSED("'%s' object isn't callable", "\377\220\205\246callable")
MP_MATCH_COMPRESSED("'%s' object isn't iterable", "\377\220\205\246iterable")
MP_MATCH_COMPRESSED("'%s' object isn't subscriptable", "\377\220\205\246subscriptable")
MP_MATCH_COMPRESSED("'=' alignment not allowed in string format specifier", "\377'=' alignment\204\275\242\226\211\227")
MP_MATCH_COMPRESSED("'await' outside function", "\377'await'\305\210")
MP_MATCH_COMPRESSED("'break'/'continue' outside loop", "\377'break'/'continue'\305loop")
MP_MATCH_COMPRESSED("'return' outside function", "\377'return'\305\210")
MP_MATCH_COMPRESSED("'yield' outside function", "\377'yield'\305\210")
MP_MATCH_COMPRESSED("*x must be assignment target", "\377*x\202\212\252target")
MP_MATCH_COMPRESSED("0.0 to a complex power", "\3770.0\215\251\300power")
MP_MATCH_COMPRESSED("AP required", "\377AP\222")
MP_MATCH_COMPRESSED("Argument is not a struct type!", "\377Argument\223\204\251struct type!")
MP_MATCH_COMPRESSED("Can't convert %s to %s!", "\377Can't\214\312\215%s!")
MP_MATCH_COMPRESSED("Cannot convert %s to pointer! (buffer does not represent a pointer)", "\377\357\214\312\215pointer! (buffer does\204represent\251pointer)")
MP_MATCH_COMPRESSED("Cannot convert '%s' to pointer!", "\377\357\214\220\215pointer!")
MP_MATCH_COMPRESSED("Cannot set field %s on struct %s!", "\377\357\266\301\312\354struct %s!")
MP_MATCH_COMPRESSED("Cast argument must be a type!", "\377Cast\206\202\212\251type!")
MP_MATCH_COMPRESSED("Channel Format is not valid", "\377Channel Format\223\204\335")
MP_MATCH_COMPRESSED("DMA Buffer Count is not valid.  Allowed range is [2, 128]", "\377DMA Buffer Count\223\204valid.  Allowed\234\223[2, 128]")
MP_MATCH_COMPRESSED("DMA Buffer Length is not valid.  Allowed range is [8, 1024]", "\377DMA Buffer Length\223\204valid.  Allowed\234\223[8, 1024]")
MP_MATCH_COMPRESSED("Data Format is not valid", "\377Data Format\223\204\335")
MP_MATCH_COMPRESSED("Failed adding SPI device", "\377\313adding\274device")
MP_MATCH_COMPRESSED("Failed creating RTCH task", "\377\313creating RTCH task")
MP_MATCH_COMPRESSED("Failed initializing SPI bus", "\377\313initializing\274bus")
MP_MATCH_COMPRESSED("I/O operation on closed file", "\377I/O\322\354closed file")
MP_MATCH_COMPRESSED("I2C operation not supported", "\377I2C\322\204\230")
MP_MATCH_COMPRESSED("I2C(%d) doesn't exist", "\377I2C(%d)\257exist")
MP_MATCH_COMPRESSED("I2S ID is not valid", "\377\225ID\223\204\335")
MP_MATCH_COMPRESSED("I2S driver install:  Out of memory", "\377\225\363\330 Out\224\316")
MP_MATCH_COMPRESSED("I2S driver install:  Parameter error", "\377\225\363\330\260\213")
MP_MATCH_COMPRESSED("I2S driver install:  Undocumented error", "\377\225\363\330\241\213")
MP_MATCH_COMPRESSED("I2S not configured for read method", "\377\225\204configured\216read\365")
MP_MATCH_COMPRESSED("I2S not configured for write method", "\377\225\204configured\216write\365")
MP_MATCH_COMPRESSED("I2S port is already in use", "\377\225port\223\256\242use")
MP_MATCH_COMPRESSED("I2S port is not initialized", "\377\225port\223\204initialized")
MP_MATCH_COMPRESSED("I2S read:  Parameter error", "\377\225read: \260\213")
MP_MATCH_COMPRESSED("I2S read:  Undocumented error", "\377\225read: \241\213")
MP_MATCH_COMPRESSED("I2S set pin:  IO error", "\377\225\266pin:  IO\213")
MP_MATCH_COMPRESSED("I2S set pin:  Parameter error", "\377\225\266pin: \260\213")
MP_MATCH_COMPRESSED("I2S set pin:  Undocumented error", "\377\225\266pin: \241\213")
MP_MATCH_COMPRESSED("I2S write: Parameter error", "\377\225write:\260\213")
MP_MATCH_COMPRESSED("I2S write: Undocumented error", "\377\225write:\241\213")
MP_MATCH_COMPRESSED("IV", "IV")
MP_MATCH_COMPRESSED("LHS of keyword arg must be an id", "\377LHS\224\221\243\202\212\276id")
MP_MATCH_COMPRESSED("Only Master Rx or Master Tx Modes are supported", "\377Only Master Rx\254Master Tx Modes are\230")
MP_MATCH_COMPRESSED("PWM not supported on pin %d", "\377PWM\204\230\354\323\240")
MP_MATCH_COMPRESSED("SPI ID must be either HSPI(1) or VSPI(2)", "\377\274ID\202\212either HSPI(1)\254VSPI(2)")
MP_MATCH_COMPRESSED("SPI bus already freed", "\377\274bus\256freed")
MP_MATCH_COMPRESSED("SPI device already freed", "\377\274device\256freed")
MP_MATCH_COMPRESSED("SPI host already in use", "\377\274host\256\242use")
MP_MATCH_COMPRESSED("STA must be active", "\377STA\202\212\361")
MP_MATCH_COMPRESSED("STA required", "\377STA\222")
MP_MATCH_COMPRESSED("Standard is not valid", "\377Standard\223\204\335")
MP_MATCH_COMPRESSED("Struct argument is not an object!", "\377Struct\206\223\204\276object!")
MP_MATCH_COMPRESSED("TCP/IP DHCP Client Start Failed", "\377\360DHCP Client Start\313")
MP_MATCH_COMPRESSED("TCP/IP IF Not Ready", "\377\360IF\336Ready")
MP_MATCH_COMPRESSED("TCP/IP Invalid Parameters", "\377\360\235Parameters")
MP_MATCH_COMPRESSED("Touch pad error", "\377Touch pad\213")
MP_MATCH_COMPRESSED("UART(%d) does not exist", "\377UART(%d) does\204exist")
MP_MATCH_COMPRESSED("UART(%d) is disabled (dedicated to REPL)", "\377UART(%d)\223disabled (dedicated\215REPL)")
MP_MATCH_COMPRESSED("UUID", "\377\250")
MP_MATCH_COMPRESSED("UUID too long", "\377\250\270\352")
MP_MATCH_COMPRESSED("UUID too short", "\377\250\270short")
MP_MATCH_COMPRESSED("WDT timeout too short", "\377WDT timeout\270short")
MP_MATCH_COMPRESSED("Wifi Internal Error", "\377\217\326\325")
MP_MATCH_COMPRESSED("Wifi Internal NVS Error", "\377\217\326NVS\325")
MP_MATCH_COMPRESSED("Wifi Internal State Error", "\377\217\326State\325")
MP_MATCH_COMPRESSED("Wifi Invalid Interface", "\377\217\235Interface")
MP_MATCH_COMPRESSED("Wifi Invalid MAC Address", "\377\217\235MAC Address")
MP_MATCH_COMPRESSED("Wifi Invalid Mode", "\377\217\235Mode")
MP_MATCH_COMPRESSED("Wifi Invalid Password", "\377\217\235Password")
MP_MATCH_COMPRESSED("Wifi Not Connected", "\377\217\336Connected")
MP_MATCH_COMPRESSED("Wifi Not Initialized", "\377\217\336Initialized")
MP_MATCH_COMPRESSED("Wifi Not Started", "\377\217\336Started")
MP_MATCH_COMPRESSED("Wifi Not Stopped", "\377\217\336Stopped")
MP_MATCH_COMPRESSED("Wifi SSID Invalid", "\377\217SSID\235")
MP_MATCH_COMPRESSED("Wifi Unknown Error 0x%04x", "\377\217Unknown\3250x%04x")
MP_MATCH_COMPRESSED("Wifi Wakeup Failure", "\377\217Wakeup Failure")
MP_MATCH_COMPRESSED("Wifi Would Block", "\377\217Would Block")
MP_MATCH_COMPRESSED("__init__() should return None, not '%s'", "\377__init__() should return None,\204\220")
MP_MATCH_COMPRESSED("abort() called", "abort() called")
MP_MATCH_COMPRESSED("address %08x is not aligned to %d bytes", "\377address %08x\223\204aligned\215\240\373")
MP_MATCH_COMPRESSED("annotation must be an identifier", "\377annotation\202\212\276\253")
MP_MATCH_COMPRESSED("arg is an empty sequence", "\377\243\223\276\244\334")
MP_MATCH_COMPRESSED("arg must be user-type", "\377\243\202\212user-type")
MP_MATCH_COMPRESSED("argument has wrong type", "\377\206\302wrong\231")
MP_MATCH_COMPRESSED("argument name reused", "\377\206\321reused")
MP_MATCH_COMPRESSED("argument num/types mismatch", "\377\206num/types mismatch")
MP_MATCH_COMPRESSED("array/bytes required on right side", "\377array/bytes\222\354right side")
MP_MATCH_COMPRESSED("attributes not supported yet", "\377attributes\204\230yet")
MP_MATCH_COMPRESSED("bad compile mode", "\377\337compile\353")
MP_MATCH_COMPRESSED("bad conversion specifier", "\377\337conversion\227")
MP_MATCH_COMPRESSED("bad frequency %d", "\377\337frequency\240")
MP_MATCH_COMPRESSED("bad typecode", "\377\337typecode")
MP_MATCH_COMPRESSED("bad wake value", "\377\337wake\311")
MP_MATCH_COMPRESSED("binary op %q not implemented", "\377binary op\345\204\245")
MP_MATCH_COMPRESSED("bits must be 8", "\377bits\202\2128")
MP_MATCH_COMPRESSED("blksize % 16", "blksize % 16")
MP_MATCH_COMPRESSED("buffer too long", "\377\315\270\352")
MP_MATCH_COMPRESSED("buffer too small", "\377\315\270small")
MP_MATCH_COMPRESSED("buffers must be the same length", "\377buffers\202\212the same\233")
MP_MATCH_COMPRESSED("bytes value out of range", "\377\373\311\265\224\234")
MP_MATCH_COMPRESSED("can query only one param", "\377can query\355one\333")
MP_MATCH_COMPRESSED("can't add special method to already-subclassed class", "\377\201add special\365\215already-subclassed\374")
MP_MATCH_COMPRESSED("can't assign to expression", "\377\201assign\215expression")
MP_MATCH_COMPRESSED("can't cancel self", "\377\201cancel self")
MP_MATCH_COMPRESSED("can't convert %s to complex", "\377\201\214\312\215\300")
MP_MATCH_COMPRESSED("can't convert %s to float", "\377\201\214\312\215float")
MP_MATCH_COMPRESSED("can't convert %s to int", "\377\201\214\312\215\320")
MP_MATCH_COMPRESSED("can't convert '%q' object to %q implicitly", "\377\201\214\203\205\215\345implicitly")
MP_MATCH_COMPRESSED("can't convert NaN to int", "\377\201\214NaN\215\320")
MP_MATCH_COMPRESSED("can't convert inf to int", "\377\201\214inf\215\320")
MP_MATCH_COMPRESSED("can't create '%q' instances", "\377\201\362\203instances")
MP_MATCH_COMPRESSED("can't create thread", "\377\201\362thread")
MP_MATCH_COMPRESSED("can't declare nonlocal in outer code", "\377\201declare\332\242outer code")
MP_MATCH_COMPRESSED("can't delete expression", "\377\201delete expression")
MP_MATCH_COMPRESSED("can't do binary op between '%q' and '%q'", "\377\201do binary op\340\203\277\203")
MP_MATCH_COMPRESSED("can't encrypt & decrypt", "\377\201encrypt & decrypt")
MP_MATCH_COMPRESSED("can't have multiple **x", "\377\201have\247**x")
MP_MATCH_COMPRESSED("can't have multiple *x", "\377\201have\247*x")
MP_MATCH_COMPRESSED("can't implicitly convert '%q' to 'bool'", "\377\201implicitly\214\203\215'bool'")
MP_MATCH_COMPRESSED("can't import name %q", "\377\201\364\321\345")
MP_MATCH_COMPRESSED("can't load from '%q'", "\377\201load\273\203")
MP_MATCH_COMPRESSED("can't load with '%q' index", "\377\201load\237\203\232")
MP_MATCH_COMPRESSED("can't perform relative import", "\377\201perform relative\364")
MP_MATCH_COMPRESSED("can't send non-None value to a just-started generator", "\377\201send non-None\311\215\251just-started\262")
MP_MATCH_COMPRESSED("can't set attribute", "\377\201\266\236")
MP_MATCH_COMPRESSED("can't specify pos and kw args", "\377\201specify pos\277kw\346")
MP_MATCH_COMPRESSED("can't store '%q'", "\377\201store\203")
MP_MATCH_COMPRESSED("can't store to '%q'", "\377\201store\215\203")
MP_MATCH_COMPRESSED("can't store with '%q' index", "\377\201store\237\203\232")
MP_MATCH_COMPRESSED("can't switch from automatic field numbering to manual field specification", "\377\201switch\273automatic\301numbering\215manual\301\366")
MP_MATCH_COMPRESSED("can't switch from manual field specification to automatic field numbering", "\377\201switch\273manual\301\366\215automatic\301numbering")
MP_MATCH_COMPRESSED("can't truncate-divide a complex number", "\377\201truncate-divide\251\300\317")
MP_MATCH_COMPRESSED("can't unambiguously get sizeof scalar", "\377\201unambiguously get sizeof scalar")
MP_MATCH_COMPRESSED("casting", "casting")
MP_MATCH_COMPRESSED("chr() arg not in range(0x110000)", "\377chr()\243\204\242range(0x110000)")
MP_MATCH_COMPRESSED("clock_div must be between 1 and 255", "\377clock_div\202\212\3401\277255")
MP_MATCH_COMPRESSED("comparison of int and uint", "\377comparison\224\320\277uint")
MP_MATCH_COMPRESSED("complex divide by zero", "\377\300divide by\356")
MP_MATCH_COMPRESSED("compression header", "compression header")
MP_MATCH_COMPRESSED("connect failed", "\377connect\264")
MP_MATCH_COMPRESSED("constant must be an integer", "\377constant\202\212\276\303")
MP_MATCH_COMPRESSED("conversion to object", "\377conversion\215\205")
MP_MATCH_COMPRESSED("default 'except' must be last", "\377\342'except'\202\212last")
MP_MATCH_COMPRESSED("dict update sequence has wrong length", "\377\350update\334\302wrong\233")
MP_MATCH_COMPRESSED("div/mod not implemented for uint", "\377div/mod\204\245\216uint")
MP_MATCH_COMPRESSED("divide by zero", "\377divide by\356")
MP_MATCH_COMPRESSED("either pos or kw args are allowed", "\377either pos\254kw\346are\275")
MP_MATCH_COMPRESSED("empty", "\377\244")
MP_MATCH_COMPRESSED("empty heap", "\377\244heap")
MP_MATCH_COMPRESSED("empty separator", "\377\244separator")
MP_MATCH_COMPRESSED("error in regex", "\377\213\242regex")
MP_MATCH_COMPRESSED("esp_sleep_enable_touchpad_wakeup() failed", "\377esp_sleep_enable_touchpad_wakeup()\264")
MP_MATCH_COMPRESSED("exceptions must derive from BaseException", "\377exceptions\202derive\273BaseException")
MP_MATCH_COMPRESSED("expected ':' after format specifier", "\377\271':'\372\211\227")
MP_MATCH_COMPRESSED("expecting a dict for keyword args", "\377\261\251\350\216\221\346")
MP_MATCH_COMPRESSED("expecting a pin", "\377\261\251\323")
MP_MATCH_COMPRESSED("expecting just a value for set", "\377\261just\251\311\216\266")
MP_MATCH_COMPRESSED("expecting key:value for dict", "\377\261key:value\216\350")
MP_MATCH_COMPRESSED("extra keyword arguments given", "\377extra\221\207\375")
MP_MATCH_COMPRESSED("extra positional arguments given", "\377extra\255\207\375")
MP_MATCH_COMPRESSED("failed to create worker task", "\377\264\215\362worker task")
MP_MATCH_COMPRESSED("firstbit must be MSB", "\377firstbit\202\212MSB")
MP_MATCH_COMPRESSED("format needs a dict", "\377\211\263\251\350")
MP_MATCH_COMPRESSED("format string didn't convert all arguments", "\377\211\226didn't\214all\207")
MP_MATCH_COMPRESSED("format string needs more arguments", "\377\211\226\263more\207")
MP_MATCH_COMPRESSED("frequency must be 20MHz, 40MHz, 80Mhz, 160MHz or 240MHz", "\377frequency\202\21220MHz, 40MHz, 80Mhz, 160MHz\254240MHz")
MP_MATCH_COMPRESSED("full", "full")
MP_MATCH_COMPRESSED("function doesn't take keyword arguments", "\377\210\257take\221\207")
MP_MATCH_COMPRESSED("function expected at most %d arguments, got %d", "\377\210\271at most\240arguments, got\240")
MP_MATCH_COMPRESSED("function got multiple values for argument '%q'", "\377\210got\247\367\216\206\203")
MP_MATCH_COMPRESSED("function missing %d required positional arguments", "\377\210\304\240\222\255\207")
MP_MATCH_COMPRESSED("function missing keyword-only argument", "\377\210\304keyword-only\206")
MP_MATCH_COMPRESSED("function missing required keyword argument '%q'", "\377\210\304\222\221\206\203")
MP_MATCH_COMPRESSED("function missing required positional argument #%d", "\377\210\304\222\255\206#%d")
MP_MATCH_COMPRESSED("function takes %d positional arguments but %d were given", "\377\210takes\240\255\207\341\240were\375")
MP_MATCH_COMPRESSED("generator already executing", "\377\262\256executing")
MP_MATCH_COMPRESSED("generator ignored GeneratorExit", "\377\262ignored GeneratorExit")
MP_MATCH_COMPRESSED("generator raised StopIteration", "\377\262raised StopIteration")
MP_MATCH_COMPRESSED("heap must be a list", "\377heap\202\212\251\351")
MP_MATCH_COMPRESSED("identifier redefined as global", "\377\253redefined as global")
MP_MATCH_COMPRESSED("identifier redefined as nonlocal", "\377\253redefined as\332")
MP_MATCH_COMPRESSED("import * not at module level", "\377\364*\204at module level")
MP_MATCH_COMPRESSED("incompatible .mpy arch", "\377\370.mpy arch")
MP_MATCH_COMPRESSED("incompatible .mpy file", "\377\370.mpy file")
MP_MATCH_COMPRESSED("incomplete format", "\377incomplete\211")
MP_MATCH_COMPRESSED("incomplete format key", "\377incomplete\211\376")
MP_MATCH_COMPRESSED("incorrect padding", "incorrect padding")
MP_MATCH_COMPRESSED("indev instance needs to be created before callback is called!", "\377indev\331\263\215\212created\314callback\223called!")
MP_MATCH_COMPRESSED("init failed", "\377init\264")
MP_MATCH_COMPRESSED("int() arg 2 must be >= 2 and <= 36", "\377int()\2432\202\212>= 2\277<= 36")
MP_MATCH_COMPRESSED("integer needed", "\377\303needed")
MP_MATCH_COMPRESSED("invalid Pin for ADC", "\377\200Pin\216ADC")
MP_MATCH_COMPRESSED("invalid Pin for DAC", "\377\200Pin\216DAC")
MP_MATCH_COMPRESSED("invalid UUID", "\377\200\250")
MP_MATCH_COMPRESSED("invalid WLAN interface identifier", "\377\200WLAN interface\253")
MP_MATCH_COMPRESSED("invalid addr", "\377\200addr")
MP_MATCH_COMPRESSED("invalid addrsize", "\377\200addrsize")
MP_MATCH_COMPRESSED("invalid arguments", "\377\200\207")
MP_MATCH_COMPRESSED("invalid auth", "\377\200auth")
MP_MATCH_COMPRESSED("invalid buffer length", "\377\200\315\233")
MP_MATCH_COMPRESSED("invalid cert", "\377\200cert")
MP_MATCH_COMPRESSED("invalid char in UUID", "\377\200char\242\250")
MP_MATCH_COMPRESSED("invalid characteristic UUID", "\377\200\347\250")
MP_MATCH_COMPRESSED("invalid characteristic tuple", "\377\200\347\306")
MP_MATCH_COMPRESSED("invalid configuration", "\377\200configuration")
MP_MATCH_COMPRESSED("invalid data bits", "\377\200data bits")
MP_MATCH_COMPRESSED("invalid descriptor UUID", "\377\200descriptor\250")
MP_MATCH_COMPRESSED("invalid dupterm index", "\377\200dupterm\232")
MP_MATCH_COMPRESSED("invalid format", "\377\200\211")
MP_MATCH_COMPRESSED("invalid format specifier", "\377\200\211\227")
MP_MATCH_COMPRESSED("invalid handler", "\377\200handler")
MP_MATCH_COMPRESSED("invalid inversion mask", "\377\200inversion mask")
MP_MATCH_COMPRESSED("invalid key", "\377\200\376")
MP_MATCH_COMPRESSED("invalid micropython decorator", "\377\200micropython decorator")
MP_MATCH_COMPRESSED("invalid pin", "\377\200\323")
MP_MATCH_COMPRESSED("invalid pin for touchpad", "\377\200\323\216touchpad")
MP_MATCH_COMPRESSED("invalid pin for wake", "\377\200\323\216wake")
MP_MATCH_COMPRESSED("invalid service UUID", "\377\200service\250")
MP_MATCH_COMPRESSED("invalid stop bits", "\377\200stop bits")
MP_MATCH_COMPRESSED("invalid syntax", "\377\200\267")
MP_MATCH_COMPRESSED("invalid syntax for integer with base %d", "\377\200\267\216\303\237base\240")
MP_MATCH_COMPRESSED("invalid syntax for number", "\377\200\267\216\317")
MP_MATCH_COMPRESSED("issubclass() arg 1 must be a class", "\377\371\2431\202\212\251\374")
MP_MATCH_COMPRESSED("issubclass() arg 2 must be a class or a tuple of classes", "\377\371\2432\202\212\251\374\254\251\306\224classes")
MP_MATCH_COMPRESSED("join expects a list of str/bytes objects consistent with self object", "\377join expects\251\351\224str/bytes objects consistent\237self\205")
MP_MATCH_COMPRESSED("key", "\377\376")
MP_MATCH_COMPRESSED("keyword argument(s) not yet implemented - use normal args instead", "\377\221argument(s)\204yet\245- use normal\346instead")
MP_MATCH_COMPRESSED("lhs and rhs should be compatible", "\377lhs\277rhs should\212compatible")
MP_MATCH_COMPRESSED("local '%q' has type '%q' but source is '%q'", "\377\377\203\302\231\203\341source\223\203")
MP_MATCH_COMPRESSED("local '%q' used before type known", "\377\377\203used\314\231known")
MP_MATCH_COMPRESSED("local variable referenced before assignment", "\377\377variable referenced\314\252")
MP_MATCH_COMPRESSED("math domain error", "\377math domain\213")
MP_MATCH_COMPRESSED("memory allocation failed, allocating %u bytes", "\377\316allocation failed, allocating %u\373")
MP_MATCH_COMPRESSED("memory allocation failed, heap is locked", "\377\316allocation failed, heap\223locked")
MP_MATCH_COMPRESSED("mktime needs a tuple of length 8 or 9 (%d given)", "\377mktime\263\251\306\224\2338\2549 (%d given)")
MP_MATCH_COMPRESSED("mode", "\377\353")
MP_MATCH_COMPRESSED("multiple *x in assignment", "\377\247*x\242\252")
MP_MATCH_COMPRESSED("multiple bases have instance lay-out conflict", "\377\247bases have\331lay-out conflict")
MP_MATCH_COMPRESSED("must be active", "\377\202\212\361")
MP_MATCH_COMPRESSED("must query one param", "\377\202query one\333")
MP_MATCH_COMPRESSED("must raise an object", "\377\202raise\276\205")
MP_MATCH_COMPRESSED("must specify all of sck/mosi/miso", "\377\202specify all\224sck/mosi/miso")
MP_MATCH_COMPRESSED("must use keyword argument for key function", "\377\202use\221\206\216\376\210")
MP_MATCH_COMPRESSED("name '%q' isn't defined", "\377\321\203\246defined")
MP_MATCH_COMPRESSED("name too long", "\377\321\270\352")
MP_MATCH_COMPRESSED("native yield", "native yield")
MP_MATCH_COMPRESSED("need more than %d values to unpack", "\377need more than\240\367\215unpack")
MP_MATCH_COMPRESSED("negative shift count", "negative shift count")
MP_MATCH_COMPRESSED("no active exception to reraise", "\377\272\361exception\215reraise")
MP_MATCH_COMPRESSED("no binding for nonlocal found", "\377\272binding\216\332\327")
MP_MATCH_COMPRESSED("no free slots", "\377\272free slots")
MP_MATCH_COMPRESSED("no module named '%q'", "\377\272module named\203")
MP_MATCH_COMPRESSED("no resources", "\377\272resources")
MP_MATCH_COMPRESSED("no such attribute", "\377\272such\236")
MP_MATCH_COMPRESSED("non-default argument follows default argument", "\377non-default\206follows\342\206")
MP_MATCH_COMPRESSED("non-hex digit found", "\377non-hex digit\327")
MP_MATCH_COMPRESSED("non-keyword arg after */**", "\377non-keyword\243\372*/**")
MP_MATCH_COMPRESSED("non-keyword arg after keyword arg", "\377non-keyword\243\372\221\243")
MP_MATCH_COMPRESSED("object '%s' isn't a tuple or list", "\377\205\220\246\251\306\254\351")
MP_MATCH_COMPRESSED("object not in sequence", "\377\205\204\242\334")
MP_MATCH_COMPRESSED("object of type '%s' has no len()", "\377\205\224\231\220\302\272len()")
MP_MATCH_COMPRESSED("object with buffer protocol required", "\377\205\237\315protocol\222")
MP_MATCH_COMPRESSED("odd-length string", "\377odd-length\226")
MP_MATCH_COMPRESSED("only one of sdin or sdout can be specified", "\377\355one\224sdin\254sdout can\212\324")
MP_MATCH_COMPRESSED("only slices with step=1 (aka None) are supported", "\377\355slices\237step=1 (aka None) are\230")
MP_MATCH_COMPRESSED("opcode", "opcode")
MP_MATCH_COMPRESSED("ord() expected a character, but string of length %d found", "\377ord()\271\251character,\341\226\224\233\240\327")
MP_MATCH_COMPRESSED("out of PWM channels", "\377\265\224PWM channels")
MP_MATCH_COMPRESSED("out of memory", "\377\265\224\316")
MP_MATCH_COMPRESSED("output too small", "\377output\270small")
MP_MATCH_COMPRESSED("overflow converting long int to machine word", "\377overflow converting\352\320\215machine word")
MP_MATCH_COMPRESSED("parameter error", "\377parameter\213")
MP_MATCH_COMPRESSED("pin can only be input", "\377\323can\355\212input")
MP_MATCH_COMPRESSED("pop from an empty set", "\377pop\273\276\244\266")
MP_MATCH_COMPRESSED("pop from empty list", "\377pop\273\244\351")
MP_MATCH_COMPRESSED("popitem(): dictionary is empty", "\377popitem(): dictionary\223\244")
MP_MATCH_COMPRESSED("pow() with 3 arguments requires integers", "\377pow()\2373\207requires integers")
MP_MATCH_COMPRESSED("queue overflow", "queue overflow")
MP_MATCH_COMPRESSED("requested length %d but object has length %d", "\377requested\233\240\341\205\302\233\240")
MP_MATCH_COMPRESSED("return expected '%q' but got '%q'", "\377return\271\203\341got\203")
MP_MATCH_COMPRESSED("rsplit(None,n)", "rsplit(None,n)")
MP_MATCH_COMPRESSED("schedule queue full", "schedule queue full")
MP_MATCH_COMPRESSED("sdin must be specified for RX mode", "\377sdin\202\212\324\216RX\353")
MP_MATCH_COMPRESSED("sdout must be specified for TX mode", "\377sdout\202\212\324\216TX\353")
MP_MATCH_COMPRESSED("set default failed", "\377\266\342\264")
MP_MATCH_COMPRESSED("sign not allowed in string format specifier", "\377sign\204\275\242\226\211\227")
MP_MATCH_COMPRESSED("sign not allowed with integer format specifier 'c'", "\377sign\204\275\237\303\211\227'c'")
MP_MATCH_COMPRESSED("single '}' encountered in format string", "\377single '}' encountered\242\211\226")
MP_MATCH_COMPRESSED("slice step can't be zero", "\377slice step\201\212\356")
MP_MATCH_COMPRESSED("slot number must be between 0 and 3 inclusive", "\377slot\317\202\212\3400\2773 inclusive")
MP_MATCH_COMPRESSED("splitting with sub-captures", "\377splitting\237sub-captures")
MP_MATCH_COMPRESSED("start must be 0 or 1", "\377start\202\2120\2541")
MP_MATCH_COMPRESSED("start/end indices", "\377start/end\343")
MP_MATCH_COMPRESSED("stream operation not supported", "\377stream\322\204\230")
MP_MATCH_COMPRESSED("string index out of range", "\377\226\232\265\224\234")
MP_MATCH_COMPRESSED("string indices must be integers, not %s", "\377\226\343\202\212integers,\204\312")
MP_MATCH_COMPRESSED("struct: can't index", "\377\344\201\232")
MP_MATCH_COMPRESSED("struct: index out of range", "\377\344\232\265\224\234")
MP_MATCH_COMPRESSED("struct: no fields", "\377\344\272fields")
MP_MATCH_COMPRESSED("substring not found", "\377substring\204\327")
MP_MATCH_COMPRESSED("super() can't find self", "\377super()\201find self")
MP_MATCH_COMPRESSED("syntax error in JSON", "\377\267\213\242JSON")
MP_MATCH_COMPRESSED("syntax error in uctypes descriptor", "\377\267\213\242uctypes descriptor")
MP_MATCH_COMPRESSED("too many values to unpack (expected %d)", "\377\270many\367\215unpack (expected %d)")
MP_MATCH_COMPRESSED("transfer on deinitialized SPI", "\377transfer\354deinitialized\274")
MP_MATCH_COMPRESSED("tuple index out of range", "\377\306\232\265\224\234")
MP_MATCH_COMPRESSED("type '%q' isn't an acceptable base type", "\377\231\203\246\276acceptable base\231")
MP_MATCH_COMPRESSED("type object '%q' has no attribute '%q'", "\377\231\205\203\302\272\236\203")
MP_MATCH_COMPRESSED("type takes 1 or 3 arguments", "\377\231takes 1\2543\207")
MP_MATCH_COMPRESSED("unary op %q not implemented", "\377unary op\345\204\245")
MP_MATCH_COMPRESSED("unexpected indent", "unexpected indent")
MP_MATCH_COMPRESSED("unexpected keyword argument '%q'", "\377unexpected\221\206\203")
MP_MATCH_COMPRESSED("unicode name escapes", "\377unicode\321escapes")
MP_MATCH_COMPRESSED("unindent doesn't match any outer indent level", "\377unindent\257match any outer indent level")
MP_MATCH_COMPRESSED("unknown config param", "\377\307config\333")
MP_MATCH_COMPRESSED("unknown format code '%c' for object of type '%s'", "\377\307\211code '%c'\216\205\224\231\220")
MP_MATCH_COMPRESSED("unknown status param", "\377\307status\333")
MP_MATCH_COMPRESSED("unknown type '%q'", "\377\307\231\203")
MP_MATCH_COMPRESSED("unmatched '{' in format", "\377unmatched '{'\242\211")
MP_MATCH_COMPRESSED("unreadable attribute", "\377unreadable\236")
MP_MATCH_COMPRESSED("unsupported format character '%c' (0x%x) at index %d", "\377\310\211character '%c' (0x%x) at\232\240")
MP_MATCH_COMPRESSED("unsupported type for %q: '%s'", "\377\310\231\216%q:\220")
MP_MATCH_COMPRESSED("unsupported types for %q: '%s', '%s'", "\377\310types\216%q: '%s',\220")
MP_MATCH_COMPRESSED("value out of range", "\377\311\265\224\234")
MP_MATCH_COMPRESSED("width must be 1 or 4 (or 8 on slot 0)", "\377width\202\2121\2544 (or 8\354slot 0)")
MP_MATCH_COMPRESSED("wrong number of arguments", "\377wrong\317\224\207")
MP_MATCH_COMPRESSED("xpt2046 instance needs to be created before callback is called!", "\377xpt2046\331\263\215\212created\314callback\223called!")
MP_MATCH_COMPRESSED("zero step", "\377\356step")
// Total input length:      9564
// Total compressed length: 5139
// Total data length:       1119
// Predicted saving:        3306

// gzip length:             5377
// Percentage of gzip:      116.4%
// zlib length:             5365
// Percentage of zlib:      116.6%
